{"version":3,"sources":["components/web3/ConnectWalletModal.tsx","../node_modules/react-use/esm/usePrevious.js"],"names":["ConnectWalletModal","props","modalProps","isOpen","onRequestClose","restModalProps","isActiveMember","useSelector","connectedMember","connectedMemberAddress","memberAddress","useWeb3Modal","account","connected","connectWeb3Modal","disconnectWeb3Modal","networkId","providerOptions","web3Modal","web3Instance","useIsDefaultChain","defaultChainError","isDefaultChain","maybeContractWallet","useMaybeContractWallet","currentProvider","pathname","useLocation","previousPathname","state","ref","useRef","useEffect","current","usePrevious","isWrongNetwork","isChainGanache","CHAINS","GANACHE","memberProfilePath","displayOptions","Object","entries","filter","type","isMobile","map","provider","isButtonDisabled","display","name","className","cachedProvider","onClick","disabled","providerName","handleSetDelegateClicked","setTimeout","Modal","keyProp","isOpenHandler","TimesSVG","maybeMemberText","to","getContractWalletWarningText","message","LoaderLarge","truncateEthAddress"],"mappings":"8UAyBe,SAASA,EACtBC,GAEA,MAEIA,EADFC,WAAaC,EADf,EACeA,OAAQC,EADvB,EACuBA,eAAmBC,EAD1C,iBAQMC,EAA0BC,aAC9B,gBAAEC,EAAF,EAAEA,gBAAF,OAAuE,KAArB,OAAfA,QAAe,IAAfA,OAAA,EAAAA,EAAiBF,mBAGhDG,EAAyBF,aAC7B,gBAAEC,EAAF,EAAEA,gBAAF,cAAmCA,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAiBE,iBAOtD,EAWIC,cARFC,EAHF,EAGEA,QACAC,EAJF,EAIEA,UACAC,EALF,EAKEA,iBACAC,EANF,EAMEA,oBACAC,EAPF,EAOEA,UACAC,EARF,EAQEA,gBACAC,EATF,EASEA,UACAC,EAVF,EAUEA,aAGF,EAA4CC,cAArCC,EAAP,EAAOA,kBAAmBC,EAA1B,EAA0BA,eAEpBC,EAAsBC,YAC1BZ,EADgD,OAEhDO,QAFgD,IAEhDA,OAFgD,EAEhDA,EAAcM,iBAOTC,EAAYC,cAAZD,SACDE,ECxEO,SAAqBC,GAChC,IAAIC,EAAMC,mBAIV,OAHAC,qBAAU,WACNF,EAAIG,QAAUJ,KAEXC,EAAIG,QDmEYC,CAAoBR,GAMvCS,GAA6C,IAAnBb,EAC1Bc,EAAiBpB,IAAcqB,IAAOC,QACtCC,EAAyB,mBAAe9B,GAExC+B,EAAgCC,OAAOC,QAAQzB,GAElD0B,QAAO,gBAAEC,EAAF,2BAAaC,YAAoB,aAATD,KAC/BE,KAAI,SAACC,GACJ,IAAMC,EACJZ,GAAkC,kBAAhBW,EAAS,GAE7B,OACE,yBACE,kCAA0BA,EAAS,GAAGE,QAAQC,MAE9CC,UAAS,sDAELtC,IAAsB,OAATK,QAAS,IAATA,OAAA,EAAAA,EAAWkC,kBAAmBL,EAAS,GAChD,2CACA,IAERM,QAAS,kBACPL,EAAmB,aAAWlC,EAAiBiC,EAAS,KAG1DO,SAAUN,EAbZ,UAcE,sBAAMG,UAAU,cAAhB,SAA+BJ,EAAS,GAAGE,QAAQC,OAEnD,cAAC,IAAD,CAAYK,aAAcR,EAAS,OAd9BA,EAAS,OAuEtB,SAASS,IACHrD,GAAUyB,GAAoBA,IAAqBW,GACrDnC,IAIJ,OAlDA4B,qBAAU,WAEN7B,GACAuB,IAAaa,GACbX,GACAA,IAAqBW,GAGrBkB,WAAWrD,EAAgB,KAE5B,CAACD,EAAQoC,EAAmBnC,EAAgBsB,EAAUE,IAyCvD,eAAC8B,EAAA,EAAD,yBACEC,QAAQ,qBACRxD,OAAQA,EACRyD,cAAexD,GACXC,GAJN,cAME,sBACE8C,UAAU,sBACVE,QAAS,WACPjD,KAHJ,SAKE,cAACyD,EAAA,EAAD,MAGF,gCAEE,qBAAKV,UAAU,eAAf,8BAGGtC,IAAcsB,IACf,qBAAKgB,UAAU,kBAAf,gCAvDR,WACE,IAAKtC,IAAcU,GAAuBY,EACxC,OAAO,KAGT,IAAM2B,EAAsCxD,EAC1C,4DACuB,IACrB,cAAC,IAAD,CAAM+C,QAASG,EAA0BO,GAAIxB,EAA7C,4BAEQ,IAJV,2CAOE,KAEJ,OACE,mBAAGY,UAAU,gBAAb,SACE,yFACuDW,OAyCtDE,GAGAnD,GAAasB,GACZ,qCACE,qBAAKgB,UAAU,gBAAf,SACE,iCAAyB,OAAjB9B,QAAiB,IAAjBA,OAAA,EAAAA,EAAmB4C,UAAW,OAGxC,qBAAKd,UAAU,0BAAf,SACE,cAACe,EAAA,EAAD,MAGF,gCACE,kEACA,cAAC,IAAD,IACA,uBACA,4EAMLtD,GACC,8BACE,sBAAMuC,UAAU,wCAAhB,SACGgB,YAAmBvD,EAAS,SAKhCC,IAAcsB,IACf,qBAAKgB,UAAU,yBAAf,SAAyCX,IAI1C3B,GACC,wBACEsC,UAAU,wCACVE,QAAStC,EAFX,SAGG","file":"static/js/9.cd446b32.chunk.js","sourcesContent":["import {isMobile} from 'react-device-detect';\nimport {Link, useLocation} from 'react-router-dom';\nimport {useEffect} from 'react';\nimport {usePrevious} from 'react-use';\nimport {useSelector} from 'react-redux';\n\nimport {CHAINS} from '../../config';\nimport {CycleEllipsis} from '../feedback';\nimport {StoreState} from '../../store/types';\nimport {truncateEthAddress} from '../../util/helpers';\nimport {useIsDefaultChain, useMaybeContractWallet} from './hooks';\nimport {useWeb3Modal} from './hooks';\nimport {WalletIcon} from '.';\nimport LoaderLarge from '../feedback/LoaderLarge';\nimport Modal from '../common/Modal';\n\nimport TimesSVG from '../../assets/svg/TimesSVG';\n\ntype ConnectWalletModalProps = {\n  modalProps: {\n    isOpen: Parameters<typeof Modal>[0]['isOpen'];\n    onRequestClose: () => void;\n  } & Partial<Parameters<typeof Modal>[0]>;\n};\n\nexport default function ConnectWalletModal(\n  props: ConnectWalletModalProps\n): JSX.Element {\n  const {\n    modalProps: {isOpen, onRequestClose, ...restModalProps},\n  } = props;\n\n  /**\n   * Selectors\n   */\n\n  const isActiveMember: boolean = useSelector(\n    ({connectedMember}: StoreState) => connectedMember?.isActiveMember === true\n  );\n\n  const connectedMemberAddress = useSelector(\n    ({connectedMember}: StoreState) => connectedMember?.memberAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {\n    // @todo Use and handle error in the UI\n    // error,\n    account,\n    connected,\n    connectWeb3Modal,\n    disconnectWeb3Modal,\n    networkId,\n    providerOptions,\n    web3Modal,\n    web3Instance,\n  } = useWeb3Modal();\n\n  const {defaultChainError, isDefaultChain} = useIsDefaultChain();\n\n  const maybeContractWallet = useMaybeContractWallet(\n    account,\n    web3Instance?.currentProvider\n  );\n\n  /**\n   * Their hooks\n   */\n\n  const {pathname} = useLocation();\n  const previousPathname = usePrevious<string>(pathname);\n\n  /**\n   * Variables\n   */\n\n  const isWrongNetwork: boolean = isDefaultChain === false;\n  const isChainGanache = networkId === CHAINS.GANACHE;\n  const memberProfilePath: string = `/members/${connectedMemberAddress}`;\n\n  const displayOptions: JSX.Element[] = Object.entries(providerOptions)\n    // If mobile, filter-out `\"injected\"`\n    .filter(([type]) => (isMobile ? type !== 'injected' : true))\n    .map((provider: Record<number, any>) => {\n      const isButtonDisabled: boolean =\n        isChainGanache && provider[0] === 'walletconnect';\n\n      return (\n        <button\n          aria-label={`Connect to ${provider[1].display.name}`}\n          key={provider[0]}\n          className={`walletconnect__options-button \n            ${\n              connected && web3Modal?.cachedProvider === provider[0]\n                ? 'walletconnect__options-button--connected'\n                : ''\n            }`}\n          onClick={() =>\n            isButtonDisabled ? () => {} : connectWeb3Modal(provider[0])\n          }\n          // disable WalletConnect button on Ganache network\n          disabled={isButtonDisabled}>\n          <span className=\"wallet-name\">{provider[1].display.name}</span>\n\n          <WalletIcon providerName={provider[0]} />\n        </button>\n      );\n    });\n\n  /**\n   * Effects\n   */\n\n  /**\n   * Automatically trigger the modal to close if we navigated from the\n   * \"set a delegate\" link in this component to the `memberProfilePath`.\n   */\n  useEffect(() => {\n    if (\n      isOpen &&\n      pathname === memberProfilePath &&\n      previousPathname &&\n      previousPathname !== memberProfilePath\n    ) {\n      // Run last in the queue, as it completes quicker than the global \"open modal\" action.\n      setTimeout(onRequestClose, 0);\n    }\n  }, [isOpen, memberProfilePath, onRequestClose, pathname, previousPathname]);\n\n  /**\n   * Functions\n   */\n\n  function getContractWalletWarningText(): JSX.Element | null {\n    if (!connected || !maybeContractWallet || isWrongNetwork) {\n      return null;\n    }\n\n    const maybeMemberText: JSX.Element | null = isActiveMember ? (\n      <>\n        As a member, you can{' '}\n        <Link onClick={handleSetDelegateClicked} to={memberProfilePath}>\n          set a delegate\n        </Link>{' '}\n        to a key-based wallet, like MetaMask.\n      </>\n    ) : null;\n\n    return (\n      <p className=\"error-message\">\n        <small>\n          Smart contract wallets are not currently supported. {maybeMemberText}\n        </small>\n      </p>\n    );\n  }\n\n  /**\n   * Allow the modal to close if the previous path was already equal to\n   * `memberProfilePath` (e.g. navigated to it normally, loaded cold from brower)\n   */\n  function handleSetDelegateClicked() {\n    if (isOpen && previousPathname && previousPathname === memberProfilePath) {\n      onRequestClose();\n    }\n  }\n\n  return (\n    <Modal\n      keyProp=\"connectWalletModal\"\n      isOpen={isOpen}\n      isOpenHandler={onRequestClose}\n      {...restModalProps}>\n      {/* MODEL CLOSE BUTTON */}\n      <span\n        className=\"modal__close-button\"\n        onClick={() => {\n          onRequestClose();\n        }}>\n        <TimesSVG />\n      </span>\n\n      <div>\n        {/* TITLE */}\n        <div className=\"modal__title\">Connect Wallet</div>\n\n        {/* SUBTITLE */}\n        {(!connected || !isWrongNetwork) && (\n          <div className=\"modal__subtitle\">Choose your wallet</div>\n        )}\n\n        {/* POSSIBLE CONTRACT WALLET WARNING TEXT */}\n        {getContractWalletWarningText()}\n\n        {/* SHOW; WRONG NETWORK MSG || PROVIDER OPTIONS */}\n        {connected && isWrongNetwork && (\n          <>\n            <div className=\"error-message\">\n              <small>{defaultChainError?.message || ''}</small>\n            </div>\n\n            <div className=\"loader--large-container\">\n              <LoaderLarge />\n            </div>\n\n            <div>\n              <small>Waiting for the right network</small>\n              <CycleEllipsis />\n              <br />\n              <small>Switch networks from your wallet.</small>\n            </div>\n          </>\n        )}\n\n        {/* CONNECTED ACCOUNT TEXT */}\n        {account && (\n          <div>\n            <span className=\"walletconnect__connected-address-text\">\n              {truncateEthAddress(account, 7)}\n            </span>\n          </div>\n        )}\n\n        {(!connected || !isWrongNetwork) && (\n          <div className=\"walletconnect__options\">{displayOptions}</div>\n        )}\n\n        {/* DISCONNECT BUTTON LINK */}\n        {connected && (\n          <button\n            className=\"walletconnect__disconnect-link-button\"\n            onClick={disconnectWeb3Modal}>\n            {'Disconnect Wallet'}\n          </button>\n        )}\n      </div>\n    </Modal>\n  );\n}\n","import { useEffect, useRef } from 'react';\nexport default function usePrevious(state) {\n    var ref = useRef();\n    useEffect(function () {\n        ref.current = state;\n    });\n    return ref.current;\n}\n"],"sourceRoot":""}