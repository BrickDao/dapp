{"version":3,"sources":["components/proposals/voting/OffchainOpRollupVotingSubmitResultAction.tsx","components/proposals/voting/OffchainVotingAction.tsx","components/proposals/helpers/getVoteChosen.ts","components/proposals/ProposalPeriod.tsx","assets/svg/StopwatchSVG.tsx","components/proposals/voting/VotingStatus.tsx","components/proposals/voting/OffchainVotingStatus.tsx","assets/svg/CheckSVG.tsx","components/proposals/voting/SquareRootVotingBar.tsx","components/proposals/voting/VotingActionButtons.tsx","components/proposals/SponsorAction.tsx","components/proposals/ProcessAction.tsx","components/proposals/PostProcessAction.tsx","components/proposals/ProposalWithOffchainVoteActions.tsx"],"names":["OffchainOpRollupVotingSubmitResultAction","props","adapterName","snapshotProposal","proposal","useState","Web3TxStatus","STANDBY","signatureStatus","setSignatureStatus","submitError","setSubmitError","bankExtensionMethods","useSelector","s","contracts","BankExtensionContract","instance","methods","offchainVotingMethods","VotingContract","daoRegistryAddress","DaoRegistryContract","contractAddress","useWeb3Modal","account","provider","useContractSend","txEtherscanURL","txIsPromptOpen","txSend","txStatus","useMemberActionDisabled","isDisabled","openWhyDisabledModal","WhyDisabledModal","gasPrices","useETHGasPrice","isInProcess","AWAITING_CONFIRM","PENDING","isDone","FULFILLED","isInProcessOrDone","a","Error","votes","proposalHash","idInDAO","adapterAddress","getAdapterAddressFromContracts","voteEntriesPromises","map","v","voteData","Object","values","createVote","address","msg","payload","choice","VoteChoicesIndex","Yes","Number","timestamp","sig","getPriorAmount","SHARES_ADDRESS","snapshot","call","voteYes","weight","prepareVoteResult","DEFAULT_CHAIN","Promise","all","actionId","chainId","daoAddress","voteResultTree","voteResultTreeHexRoot","getHexRoot","result","toStepNode","merkleTree","step","length","verifyingContract","getVoteResultRootDomainDefinition","domain","types","messageParams","JSON","stringify","message","root","primaryType","PRIMARY_TYPE_ERC712","signMessage","signature","submitVoteResultArguments","rootSig","txArguments","from","gasPrice","fast","REJECTED","className","disabled","onClick","Loader","ErrorMessageWithDetails","error","renderText","CycleMessage","intervalMs","messages","TX_CYCLE_MESSAGES","useFirstItemStart","render","FadeIn","EtherscanURL","url","isPending","renderSubmitStatus","title","OffchainVotingAction","voteChoiceClicked","setVoteChoiceClicked","votingDisabledReasonsRef","useRef","addressIsDelegatedMessage","alreadyVotedMessage","delegateAddress","connectedMember","delegateKey","useSignAndSendVote","signAndSendVote","voteDataStatus","isAddressDelegated","useIsAddressDelegated","voteChosen","voteEntry","find","ve","entries","normalizeString","VoteChoices","No","getVoteChosen","setOtherDisabledReasons","snapshotProposalId","idInSnapshot","isSubmitDisabled","voteChoiceProgress","undefined","partialVoteData","proposalIdInDAO","proposalIdInSnapshot","refetchProposalOrDraft","useEffect","current","VotingActionButtons","buttonProps","voteProgress","ProposalPeriod","startLabel","startPeriodMs","endLabel","endedLabel","endPeriodMs","proposalPeriod","setProposalPeriod","displayCountdownCached","useCallback","countdown","showDaysOnly","endtime","t","Date","parse","toString","seconds","Math","floor","minutes","hours","total","days","getTimeRemaining","formatTimePeriod","time","period","formattedPeriod","interval","setInterval","currentDate","startDate","endDate","start","end","clearInterval","StopwatchSVG","width","height","viewBox","version","d","id","stroke","strokeWidth","fill","fillRule","xlinkHref","VotingStatus","hasVotingEnded","noShares","renderStatus","renderTimer","showPercentages","totalShares","yesShares","renderedStatus","aria-label","role","SquareRootVotingBar","votingExpired","gracePeriodEndLabel","gracePeriodEndedLabel","style","textTransform","cycleEllipsisFadeInProps","duration","OffchainVotingStatus","countdownGracePeriodStartMs","daoRegistryInstance","didVotePass","setDidVotePass","gracePeriodEndMs","setGracePeriodEndMs","useOffchainVotingStartEnd","hasOffchainVotingStarted","hasOffchainVotingEnded","offchainVotingStartEndInitReady","votingResults","useOffchainVotingResults","votingStartSeconds","votingEndSeconds","shares","getDAOConfigEntry","ContractDAOConfigKeys","offchainVotingGracePeriod","then","r","catch","ProposalPeriodComponent","fadeInProps","CheckSVG","xmlns","xmlnsXlink","getSharesPercent","toFixed","percentYes","percentNo","getVotedClass","getARIALabel","getVotingText","handleClick","SponsorAction","snapshotDraft","web3Instance","useSignAndSubmitProposal","proposalSignAndSendStatus","signAndSendProposal","contract","getContractByAddress","name","body","metadata","partialProposalData","type","SnapshotType","data","preparedVoteVerificationBytes","prepareVoteProposalData","choices","space","parseInt","sponsorArguments","ProcessAction","propsDisabled","areSomeDisabled","processArguments","PostProcessAction","actionDisabledReasonsRef","alreadyCompletedMessage","daoRegistryContract","getSubmitConfigsByAdapter","ContractAdapterNames","distribute","toIndexArg","isTypeAllMembers","getNbMembers","nbMembers","functionName","functionArguments","renderSubmitStatusByAdapter","renderButtonTextByAdapter","done","distributeContract","distributions","distributeProposal","DistributionStatus","status","IN_PROGRESS","console","getActionDisabledReasons","ProposalWithOffchainVoteActions","useProposalWithOffchainVoteStatus","daoProposalVotes","daoProposalVoteResult","gracePeriodStartMs","ProposalFlowStatus","OffchainVotingGracePeriod","gracePeriodStartingTime","showPostProcessAction","Completed","VotingState","PASS","OffchainVoting","OffchainVotingSubmitResult","Process","Sponsor"],"mappings":"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","file":"static/js/3.88170f9b.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\nimport {\n  createVote,\n  getVoteResultRootDomainDefinition,\n  prepareVoteResult,\n  signMessage,\n  SnapshotVoteResponseData,\n  toStepNode,\n  VoteChoicesIndex,\n} from '@openlaw/snapshot-js-erc712';\nimport {VoteEntry} from '@openlaw/snapshot-js-erc712/dist/types';\n\nimport {ContractAdapterNames, Web3TxStatus} from '../../web3/types';\nimport {getAdapterAddressFromContracts} from '../../web3/helpers';\nimport {DEFAULT_CHAIN, SHARES_ADDRESS} from '../../../config';\nimport {PRIMARY_TYPE_ERC712, TX_CYCLE_MESSAGES} from '../../web3/config';\nimport {ProposalData} from '../types';\nimport {StoreState} from '../../../store/types';\nimport {useMemberActionDisabled} from '../../../hooks';\nimport {useWeb3Modal, useContractSend, useETHGasPrice} from '../../web3/hooks';\nimport CycleMessage from '../../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../../web3/EtherscanURL';\nimport FadeIn from '../../common/FadeIn';\nimport Loader from '../../feedback/Loader';\n\ntype OffchainVotingSubmitResultActionProps = {\n  adapterName: ContractAdapterNames;\n  proposal: ProposalData;\n};\n\ntype SubmitVoteResultArguments = [\n  string, // `dao`\n  string, // `proposalId`\n  string, // `proposal data`,\n  {\n    account: string;\n    choice: VoteChoicesIndex;\n    index: number;\n    nbNo: string;\n    nbYes: string;\n    proof: string[];\n    proposalHash: string;\n    rootSig: string;\n    sig: string;\n    timestamp: number;\n  }\n];\n\nexport function OffchainOpRollupVotingSubmitResultAction(\n  props: OffchainVotingSubmitResultActionProps\n) {\n  const {\n    adapterName,\n    proposal: {snapshotProposal},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [signatureStatus, setSignatureStatus] = useState<Web3TxStatus>(\n    Web3TxStatus.STANDBY\n  );\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const bankExtensionMethods = useSelector(\n    (s: StoreState) => s.contracts.BankExtensionContract?.instance.methods\n  );\n  const offchainVotingMethods = useSelector(\n    (s: StoreState) => s.contracts.VotingContract?.instance.methods\n  );\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n  const contracts = useSelector((s: StoreState) => s.contracts);\n\n  /**\n   * Our hooks\n   */\n\n  const {account, provider} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    signatureStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    signatureStatus === Web3TxStatus.PENDING ||\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING;\n\n  const isDone =\n    txStatus === Web3TxStatus.FULFILLED &&\n    signatureStatus === Web3TxStatus.FULFILLED;\n\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      if (!snapshotProposal.votes) {\n        throw new Error('No Snapshot proposal votes were found.');\n      }\n\n      setSignatureStatus(Web3TxStatus.AWAITING_CONFIRM);\n\n      const {idInDAO: proposalHash} = snapshotProposal;\n      const adapterAddress = getAdapterAddressFromContracts(\n        adapterName,\n        contracts\n      );\n\n      // 1. Create vote entries\n      const voteEntriesPromises: Promise<VoteEntry>[] = snapshotProposal.votes.map(\n        async (v) => {\n          const voteData: SnapshotVoteResponseData = Object.values(v)[0];\n\n          return createVote({\n            proposalHash,\n            account: voteData.address,\n            voteYes: voteData.msg.payload.choice === VoteChoicesIndex.Yes,\n            timestamp: Number(voteData.msg.timestamp),\n            sig: voteData.sig,\n            // @todo conditionally use subgraph weight data\n            weight: await bankExtensionMethods\n              .getPriorAmount(\n                voteData.address,\n                SHARES_ADDRESS,\n                snapshotProposal.msg.payload.snapshot\n              )\n              .call(),\n          });\n        }\n      );\n\n      // 2. Prepare vote Result\n      const {voteResultTree, votes} = await prepareVoteResult({\n        actionId: adapterAddress,\n        chainId: DEFAULT_CHAIN,\n        daoAddress: daoRegistryAddress,\n        votes: await Promise.all(voteEntriesPromises),\n      });\n\n      const voteResultTreeHexRoot = voteResultTree.getHexRoot();\n\n      const result = toStepNode({\n        actionId: adapterAddress,\n        chainId: DEFAULT_CHAIN,\n        merkleTree: voteResultTree,\n        // @note Should use last entry\n        step: votes[votes.length - 1],\n        verifyingContract: daoRegistryAddress,\n      });\n\n      const {domain, types} = getVoteResultRootDomainDefinition(\n        daoRegistryAddress,\n        adapterAddress,\n        DEFAULT_CHAIN\n      );\n\n      const messageParams = JSON.stringify({\n        domain,\n        message: {root: voteResultTreeHexRoot},\n        primaryType: PRIMARY_TYPE_ERC712,\n        types,\n      });\n\n      // 3. Sign message\n      const signature = await signMessage(provider, account, messageParams);\n\n      setSignatureStatus(Web3TxStatus.FULFILLED);\n\n      const submitVoteResultArguments: SubmitVoteResultArguments = [\n        daoRegistryAddress,\n        proposalHash,\n        voteResultTreeHexRoot,\n        {...result, rootSig: signature},\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      // 4. Send the tx\n      await txSend(\n        'submitVoteResult',\n        offchainVotingMethods,\n        submitVoteResultArguments,\n        txArguments\n      );\n    } catch (error) {\n      setSubmitError(error);\n      setSignatureStatus(Web3TxStatus.REJECTED);\n    }\n  }\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Either Snapshot or chain tx\n    if (\n      txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n      signatureStatus === Web3TxStatus.AWAITING_CONFIRM\n    ) {\n      return 'Awaiting your confirmation\\u2026';\n    }\n\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Result submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={isDisabled || isInProcessOrDone}\n          onClick={isDisabled || isInProcessOrDone ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Submit Vote Result'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button className=\"button--help\" onClick={openWhyDisabledModal}>\n            Why is submitting disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is this disabled?\" />\n    </>\n  );\n}\n","import React, {useEffect, useRef, useState} from 'react';\n\nimport {ContractAdapterNames, Web3TxStatus} from '../../web3/types';\nimport {getVoteChosen} from '../helpers';\nimport {ProposalData} from '../types';\nimport {StoreState} from '../../../store/types';\nimport {useIsAddressDelegated, useWeb3Modal} from '../../web3/hooks';\nimport {useMemberActionDisabled} from '../../../hooks';\nimport {useSelector} from 'react-redux';\nimport {useSignAndSendVote} from '../hooks';\nimport {VoteChoices} from '@openlaw/snapshot-js-erc712';\nimport {VotingActionButtons} from '.';\nimport ErrorMessageWithDetails from '../../common/ErrorMessageWithDetails';\n\ntype OffchainVotingActionProps = {\n  adapterName: ContractAdapterNames;\n  proposal: ProposalData;\n};\n\ntype VotingDisabledReasons = {\n  addressIsDelegatedMessage: string;\n  alreadyVotedMessage: string;\n};\n\nconst getDelegatedAddressMessage = (a: string) =>\n  `Your member address is delegated to ${a}. You must use that address to vote.`;\n\n/**\n * OffchainVotingAction\n *\n * An off-chain voting action component which facilitates submitting to Snapshot Hub.\n *\n * @returns {JSX.Element}\n */\nexport function OffchainVotingAction(\n  props: OffchainVotingActionProps\n): JSX.Element | null {\n  const {adapterName, proposal} = props;\n\n  /**\n   * State\n   */\n\n  const [voteChoiceClicked, setVoteChoiceClicked] = useState<VoteChoices>();\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Refs\n   */\n\n  const votingDisabledReasonsRef = useRef<VotingDisabledReasons>({\n    addressIsDelegatedMessage: '',\n    alreadyVotedMessage: '',\n  });\n\n  /**\n   * Selectors\n   */\n\n  const delegateAddress = useSelector(\n    (s: StoreState) => s.connectedMember?.delegateKey\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account} = useWeb3Modal();\n  const {signAndSendVote, voteDataStatus} = useSignAndSendVote();\n  const isAddressDelegated = useIsAddressDelegated();\n  const voteChosen = getVoteChosen(\n    proposal.snapshotProposal?.votes,\n    account || ''\n  );\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    setOtherDisabledReasons,\n    WhyDisabledModal,\n  } = useMemberActionDisabled();\n\n  /**\n   * Variables\n   */\n\n  const proposalHash: string = proposal.snapshotProposal?.idInDAO || '';\n  const snapshotProposalId: string =\n    proposal.snapshotProposal?.idInSnapshot || '';\n\n  const isInProcess =\n    voteDataStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    voteDataStatus === Web3TxStatus.PENDING;\n\n  const isDone = voteDataStatus === Web3TxStatus.FULFILLED;\n\n  const isInProcessOrDone = isInProcess || isDone;\n\n  const isSubmitDisabled = isDisabled || isInProcessOrDone;\n\n  const voteChoiceProgress: VoteChoices | undefined = isInProcess\n    ? voteChoiceClicked\n    : undefined;\n\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    // 1. Determine and set local reasons why voting would be disabled\n\n    // Reason: address is delegated\n    if (delegateAddress) {\n      // Set or unset\n      const addressIsDelegatedMessage = isAddressDelegated\n        ? getDelegatedAddressMessage(delegateAddress)\n        : '';\n\n      votingDisabledReasonsRef.current = {\n        ...votingDisabledReasonsRef.current,\n        addressIsDelegatedMessage,\n      };\n    }\n\n    // Reason: already voted\n    votingDisabledReasonsRef.current = {\n      ...votingDisabledReasonsRef.current,\n      alreadyVotedMessage: voteChosen ? 'You have already voted.' : '',\n    };\n\n    // 2. Set reasons\n    setOtherDisabledReasons(Object.values(votingDisabledReasonsRef.current));\n  }, [\n    delegateAddress,\n    isAddressDelegated,\n    setOtherDisabledReasons,\n    voteChosen,\n  ]);\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmitVote(choice: VoteChoices) {\n    try {\n      if (!proposalHash) {\n        throw new Error('No proposal hash was found.');\n      }\n      if (!snapshotProposalId) {\n        throw new Error('No proposal ID was found.');\n      }\n\n      setVoteChoiceClicked(VoteChoices[choice]);\n\n      await signAndSendVote({\n        partialVoteData: {choice},\n        adapterName,\n        proposalIdInDAO: proposalHash,\n        proposalIdInSnapshot: snapshotProposalId,\n      });\n\n      // Refetch to show the vote the user submitted\n      await proposal.refetchProposalOrDraft();\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  return (\n    <>\n      <VotingActionButtons\n        onClick={isSubmitDisabled ? () => {} : handleSubmitVote}\n        buttonProps={{\n          disabled: isSubmitDisabled,\n          'aria-disabled': isSubmitDisabled,\n        }}\n        voteChosen={voteChosen}\n        voteProgress={voteChoiceProgress}\n      />\n\n      <ErrorMessageWithDetails\n        error={submitError}\n        renderText=\"Something went wrong\"\n      />\n\n      {isDisabled && (\n        <button className=\"button--help\" onClick={openWhyDisabledModal}>\n          Why is voting disabled?\n        </button>\n      )}\n\n      <WhyDisabledModal title=\"Why is voting disabled?\" />\n    </>\n  );\n}\n","import {VoteChoicesIndex} from '@openlaw/snapshot-js-erc712';\n\nimport {normalizeString} from '../../../util/helpers';\nimport {SnapshotProposal} from '../types';\nimport {VoteChoices} from '../../web3/types';\n\nexport function getVoteChosen(\n  votes: SnapshotProposal['votes'],\n  account: string\n): VoteChoices | undefined {\n  const voteEntry = (votes || []).find((ve) =>\n    Object.entries(ve).find(\n      ([address, _voteData]) =>\n        normalizeString(address) === normalizeString(account || '')\n    )\n  );\n\n  if (voteEntry) {\n    const voteData = Object.entries(voteEntry)[0][1];\n    const choice = voteData.msg.payload.choice;\n\n    return choice === VoteChoicesIndex.Yes ? VoteChoices.Yes : VoteChoices.No;\n  }\n\n  return undefined;\n}\n","import React, {useCallback, useEffect, useState} from 'react';\n\ntype ProposalPeriodProps = {\n  startLabel?: React.ReactNode;\n  startPeriodMs: number;\n  endLabel?: React.ReactNode;\n  endedLabel?: React.ReactNode;\n  endPeriodMs: number;\n};\n\nexport default function ProposalPeriod(props: ProposalPeriodProps) {\n  const {startLabel, startPeriodMs, endLabel, endedLabel, endPeriodMs} = props;\n\n  /**\n   * Variables\n   */\n\n  const getTimeRemaining = (endtime: Date) => {\n    const t =\n      Date.parse(endtime.toString()) - Date.parse(new Date().toString());\n    const seconds = Math.floor((t / 1000) % 60);\n    const minutes = Math.floor((t / 1000 / 60) % 60);\n    const hours = Math.floor((t / (1000 * 60 * 60)) % 24);\n    const days = Math.floor(t / (1000 * 60 * 60 * 24));\n\n    return {\n      total: t,\n      days: days,\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n    };\n  };\n\n  /**\n   * State\n   */\n\n  const [proposalPeriod, setProposalPeriod] = useState<React.ReactNode>(null);\n\n  /**\n   * Cached callbacks\n   */\n\n  const displayCountdownCached = useCallback(displayCountdown, []);\n\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const currentDate = new Date();\n      const startDate = new Date(startPeriodMs);\n      const endDate = new Date(endPeriodMs);\n\n      if (currentDate < startDate) {\n        const start = (\n          <span>\n            <span className=\"votingstatus\">{startLabel || 'Starts:'}</span>{' '}\n            <span className=\"votingstatus__timer\">\n              {displayCountdownCached(startDate, true)}\n            </span>\n          </span>\n        );\n\n        setProposalPeriod(start);\n      } else if (currentDate < endDate) {\n        const end = (\n          <span>\n            <span className=\"votingstatus\">{endLabel || 'Ends:'}</span>{' '}\n            <span className=\"votingstatus__timer\">\n              {displayCountdownCached(endDate)}\n            </span>\n          </span>\n        );\n\n        setProposalPeriod(end);\n      } else {\n        const ended = (\n          <span className=\"votingstatus\">{endedLabel || 'Ended'}</span>\n        );\n\n        setProposalPeriod(ended);\n        clearInterval(interval);\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [\n    displayCountdownCached,\n    endLabel,\n    endPeriodMs,\n    endedLabel,\n    startLabel,\n    startPeriodMs,\n  ]);\n\n  /**\n   * Functions\n   */\n\n  function displayCountdown(\n    countdown: Date,\n    showDaysOnly?: boolean\n  ): string | React.ReactNode {\n    const {days, hours, minutes, seconds} = getTimeRemaining(countdown);\n\n    if (days > 2 && showDaysOnly) {\n      return `~${days} days`;\n    } else if (days > 0) {\n      return `${formatTimePeriod(days, 'day')} : ${formatTimePeriod(\n        hours,\n        'hr'\n      )} : ${formatTimePeriod(minutes, 'min')}`;\n    } else if (hours > 0) {\n      return `${formatTimePeriod(hours, 'hr')} : ${formatTimePeriod(\n        minutes,\n        'min'\n      )}`;\n    } else if (minutes > 0) {\n      return `${formatTimePeriod(minutes, 'min')} : ${formatTimePeriod(\n        seconds,\n        'sec'\n      )}`;\n    } else {\n      return (\n        <span className=\"color-brightsalmon\">\n          {formatTimePeriod(seconds, 'sec')}\n        </span>\n      );\n    }\n  }\n\n  function formatTimePeriod(time: number, period: string) {\n    const formattedPeriod = time === 0 || time > 1 ? `${period}s` : period;\n\n    return `${time} ${formattedPeriod}`;\n  }\n\n  /**\n   * Render\n   */\n\n  return <div>{proposalPeriod}</div>;\n}\n","import {SVGAttributes} from 'react';\n\nexport default function StopwatchSVG(props: SVGAttributes<HTMLOrSVGElement>) {\n  return (\n    <svg\n      width=\"20px\"\n      height=\"20px\"\n      viewBox=\"0 0 21 24\"\n      version=\"1.1\"\n      {...props}>\n      <defs>\n        <path\n          d=\"M17.6516,6.408 C19.8162,8.36 21,11.02 21,13.844 C21,19.458 16.303,24 10.5,24 C4.69616,24 0,19.457 0,13.844 C0,8.506 4.22802,4.197 9.53077,3.731 L9.53077,1.875 L6.68768,1.875 C6.15238,1.875 5.71845,1.455 5.71845,0.938 C5.71845,0.42 6.15238,0 6.68768,0 L14.3123,0 C14.8476,0 15.2815,0.42 15.2815,0.938 C15.2815,1.455 14.8476,1.875 14.3123,1.875 L11.46923,1.875 L11.46923,3.731 C13.1316,3.877 14.7126,4.398 16.1059,5.252 L17.4392,3.962 C17.8177,3.596 18.4314,3.596 18.8099,3.962 C19.1885,4.328 19.1885,4.922 18.8099,5.288 L17.6516,6.408 Z M10.5,22.125 C15.2208,22.125 19.0615,18.41 19.0615,13.844 C19.0615,9.277 15.2209,5.562 10.5,5.562 C5.77913,5.562 1.93846,9.277 1.93846,13.844 C1.93846,18.41 5.77917,22.125 10.5,22.125 Z M11.46923,8.312 L11.46923,13.844 C11.46923,14.362 11.03531,14.781 10.5,14.781 C9.96469,14.781 9.53077,14.362 9.53077,13.844 L9.53077,8.312 C9.53077,7.795 9.96469,7.375 10.5,7.375 C11.03531,7.375 11.46923,7.795 11.46923,8.312 Z\"\n          id=\"path-1\"></path>\n      </defs>\n      <g\n        id=\"Page-1\"\n        stroke=\"none\"\n        strokeWidth=\"1\"\n        fill=\"none\"\n        fillRule=\"evenodd\">\n        <g id=\"Group-70\">\n          <mask id=\"mask-2\" fill=\"white\">\n            <use xlinkHref=\"#path-1\"></use>\n          </mask>\n          <use id=\"Clip-69\" fill=\"currentColor\" xlinkHref=\"#path-1\"></use>\n        </g>\n      </g>\n    </svg>\n  );\n}\n","import React from 'react';\n\nimport {SquareRootVotingBar} from '.';\nimport ProposalPeriod from '../ProposalPeriod';\nimport StopwatchSVG from '../../../assets/svg/StopwatchSVG';\n\ntype VotingStatusProps = {\n  hasVotingEnded: boolean;\n  /**\n   * A render prop to display status to before / after the clock timer is shown.\n   */\n  renderStatus: () => React.ReactNode;\n  /**\n   * A render prop: display the `ProposalPeriod` timer.\n   * `renderTimer` Provides `ProposalPeriod` component as an argument.\n   *\n   * Passing the `ProposalPeriod` component via the render prop\n   * gives the opportunity to easily show a timer for voting, or grace period, for example,\n   * without adding more props.\n   */\n  renderTimer: (component: typeof ProposalPeriod) => React.ReactNode;\n  /**\n   * Set to `false` to hide percentage data under the voting progress bar.\n   * Defaults to `true`.\n   */\n  showPercentages?: boolean;\n  noShares: Parameters<typeof SquareRootVotingBar>[0]['noShares'];\n  totalShares: Parameters<typeof SquareRootVotingBar>[0]['totalShares'];\n  yesShares: Parameters<typeof SquareRootVotingBar>[0]['yesShares'];\n};\n\nexport function VotingStatus(props: VotingStatusProps) {\n  const {\n    hasVotingEnded,\n    noShares,\n    renderStatus,\n    renderTimer,\n    showPercentages = true,\n    totalShares,\n    yesShares,\n  } = props;\n\n  const renderedStatus = renderStatus();\n\n  return (\n    <>\n      <div className=\"votingstatus-container\">\n        <StopwatchSVG aria-label=\"Counting down until voting ends\" role=\"img\" />\n\n        {renderedStatus && (\n          <span className=\"votingstatus\">{renderedStatus}</span>\n        )}\n\n        {renderTimer(ProposalPeriod)}\n      </div>\n\n      {/* VOTES */}\n      <SquareRootVotingBar\n        yesShares={yesShares}\n        noShares={noShares}\n        totalShares={totalShares}\n        votingExpired={hasVotingEnded}\n        showPercentages={showPercentages}\n      />\n    </>\n  );\n}\n","import {useEffect, useState} from 'react';\n\nimport {ContractDAOConfigKeys} from '../../web3/types';\nimport {CycleEllipsis} from '../../feedback';\nimport {getDAOConfigEntry} from '../../web3/helpers';\nimport {ProposalData} from '../types';\nimport {StoreState} from '../../../store/types';\nimport {useOffchainVotingResults, useOffchainVotingStartEnd} from '../hooks';\nimport {useSelector} from 'react-redux';\nimport {VotingStatus} from './VotingStatus';\n\ntype OffchainVotingStatusProps = {\n  /**\n   * When the offchain grace period seconds are provided the grace period timer\n   * will display. The end seconds will be determined inside the component.\n   *\n   * Be sure to unset this value (`0`, `undefined`) if the grace period should not show.\n   */\n  countdownGracePeriodStartMs?: number;\n  proposal: ProposalData;\n  showPercentages?: boolean;\n};\n\n// Cached grace period label\nconst gracePeriodEndLabel = (\n  <span>\n    Grace period ends:\n    <br />\n  </span>\n);\n\n// Cached grace period ended label\nconst gracePeriodEndedLabel = (\n  <span>\n    Grace period ended <br />{' '}\n    <span style={{textTransform: 'none'}}>\n      Awaiting contract status&hellip;\n    </span>\n  </span>\n);\n\nconst cycleEllipsisFadeInProps = {duration: 150};\n\n/**\n * OffchainVotingStatus\n *\n * A read-only component to show voting status information.\n *\n * @param {OffchainVotingStatusProps} props\n * @returns {JSX.Element}\n */\nexport function OffchainVotingStatus({\n  countdownGracePeriodStartMs,\n  proposal,\n}: OffchainVotingStatusProps): JSX.Element {\n  const {snapshotProposal} = proposal;\n\n  /**\n   * Selectors\n   */\n\n  const daoRegistryInstance = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.instance\n  );\n\n  /**\n   * State\n   */\n\n  const [didVotePass, setDidVotePass] = useState<boolean>();\n  const [gracePeriodEndMs, setGracePeriodEndMs] = useState<number>(0);\n\n  /**\n   * Our hooks\n   */\n\n  const {\n    hasOffchainVotingStarted,\n    hasOffchainVotingEnded,\n    offchainVotingStartEndInitReady,\n  } = useOffchainVotingStartEnd(proposal);\n\n  const votingResults = useOffchainVotingResults(proposal);\n\n  /**\n   * Variables\n   */\n\n  const votingStartSeconds = snapshotProposal?.msg.payload.start || 0;\n  const votingEndSeconds = snapshotProposal?.msg.payload.end || 0;\n  const yesShares = votingResults?.Yes.shares || 0;\n  const noShares = votingResults?.No.shares || 0;\n  const totalShares = votingResults?.totalShares;\n\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    if (!hasOffchainVotingEnded) return;\n\n    setDidVotePass(yesShares > noShares);\n  }, [hasOffchainVotingEnded, noShares, yesShares]);\n\n  // Determine grace period end\n  useEffect(() => {\n    if (!countdownGracePeriodStartMs || !daoRegistryInstance) return;\n\n    getDAOConfigEntry(\n      ContractDAOConfigKeys.offchainVotingGracePeriod,\n      daoRegistryInstance\n    )\n      .then((r) => r && setGracePeriodEndMs(Number(r) * 1000))\n      .catch(() => setGracePeriodEndMs(0));\n  }, [countdownGracePeriodStartMs, daoRegistryInstance]);\n\n  /**\n   * Functions\n   */\n\n  function renderStatus() {\n    // On loading\n    if (!offchainVotingStartEndInitReady) {\n      return (\n        <CycleEllipsis\n          intervalMs={200}\n          fadeInProps={cycleEllipsisFadeInProps}\n        />\n      );\n    }\n\n    // Do not show a label as we provide one in addition to the timer.\n    if (countdownGracePeriodStartMs) {\n      return '';\n    }\n\n    // On voting ended\n    if (typeof didVotePass === 'boolean') {\n      return didVotePass ? 'Approved' : 'Failed';\n    }\n  }\n\n  function renderTimer(\n    ProposalPeriodComponent: Parameters<\n      Parameters<typeof VotingStatus>[0]['renderTimer']\n    >[0]\n  ) {\n    // Vote countdown timer\n    if (\n      offchainVotingStartEndInitReady &&\n      hasOffchainVotingStarted &&\n      !hasOffchainVotingEnded\n    ) {\n      return (\n        <ProposalPeriodComponent\n          startPeriodMs={votingStartSeconds * 1000}\n          endPeriodMs={votingEndSeconds * 1000}\n        />\n      );\n    }\n\n    // Grace period countdown timer\n    if (countdownGracePeriodStartMs && gracePeriodEndMs) {\n      return (\n        <ProposalPeriodComponent\n          startPeriodMs={countdownGracePeriodStartMs}\n          endLabel={gracePeriodEndLabel}\n          endedLabel={gracePeriodEndedLabel}\n          endPeriodMs={countdownGracePeriodStartMs + gracePeriodEndMs}\n        />\n      );\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  return (\n    <VotingStatus\n      renderTimer={renderTimer}\n      renderStatus={renderStatus}\n      hasVotingEnded={hasOffchainVotingEnded}\n      noShares={noShares}\n      totalShares={totalShares}\n      yesShares={yesShares}\n    />\n  );\n}\n","import {SVGAttributes} from 'react';\n\nexport default function CheckSVG(props: SVGAttributes<HTMLOrSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n      width=\"18\"\n      height=\"18\"\n      viewBox=\"0 0 512 512\"\n      {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M435.848 83.466L172.804 346.51l-96.652-96.652c-4.686-4.686-12.284-4.686-16.971 0l-28.284 28.284c-4.686 4.686-4.686 12.284 0 16.971l133.421 133.421c4.686 4.686 12.284 4.686 16.971 0l299.813-299.813c4.686-4.686 4.686-12.284 0-16.971l-28.284-28.284c-4.686-4.686-12.284-4.686-16.97 0z\"></path>\n    </svg>\n  );\n}\n","import CheckSVG from '../../../assets/svg/CheckSVG';\n\ntype SquareRootVotingBarProps = {\n  /**\n   * Allow values to not be set as they may not be ready\n   */\n  yesShares: number | undefined;\n  /**\n   * Allow values to not be set as they may not be ready\n   */\n  noShares: number | undefined;\n  /**\n   * Allow values to not be set as they may not be ready\n   */\n  totalShares: number | undefined;\n  votingExpired: boolean;\n  showPercentages: boolean;\n};\n\nfunction getSharesPercent(shares: number, totalShares: number) {\n  return ((shares / totalShares) * 100).toFixed(0);\n}\n\nexport function SquareRootVotingBar({\n  yesShares = 0,\n  noShares = 0,\n  totalShares,\n  votingExpired,\n  showPercentages,\n}: SquareRootVotingBarProps) {\n  /**\n   * Variables\n   */\n\n  const percentYes = totalShares\n    ? getSharesPercent(yesShares, totalShares)\n    : '0';\n  const percentNo = totalShares ? getSharesPercent(noShares, totalShares) : '0';\n\n  /**\n   * Render\n   */\n\n  return (\n    <div className=\"votingbar-container\">\n      <div className=\"votingbar\">\n        {/* YES */}\n        <div\n          className=\"votingbar__segment--yes\"\n          aria-label={`${percentYes}% yes votes`}\n          style={{\n            width: `${percentYes}%`,\n          }}\n        />\n\n        {/* NO */}\n        <div\n          className=\"votingbar__segment--no\"\n          aria-label={`${percentNo}% no votes`}\n          style={{\n            width: `${percentNo}%`,\n          }}\n        />\n      </div>\n\n      <div className=\"votingbar__percentages\">\n        {showPercentages && (\n          <>\n            {/* YES */}\n            {votingExpired && yesShares > noShares && (\n              <span className=\"yes-check\">\n                <CheckSVG aria-label=\"Vote has passed\" />\n              </span>\n            )}\n            <span className=\"yes-percent\">{percentYes}%</span>\n\n            {/* NO */}\n            <span className=\"no-percent\">{percentNo}%</span>\n            {votingExpired && yesShares <= noShares && (\n              <span className=\"no-check\">\n                <CheckSVG aria-label=\"Vote has failed\" />\n              </span>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, {ButtonHTMLAttributes} from 'react';\nimport {VoteChoices} from '@openlaw/snapshot-js-erc712';\n\nimport Loader from '../../feedback/Loader';\n\ntype VotingActionButtonsProps = {\n  /**\n   * Common <button /> props for both buttons\n   */\n  buttonProps?: ButtonHTMLAttributes<HTMLButtonElement>;\n  onClick: (choice: VoteChoices) => void;\n  /**\n   * Which vote did the current connected user submit?\n   */\n  voteChosen?: VoteChoices;\n  /**\n   * Shows a loading spinner for a voting button.\n   */\n  voteProgress?: VoteChoices;\n};\n\n/**\n * @todo Implement vote chosen\n */\nexport function VotingActionButtons(\n  props: VotingActionButtonsProps\n): JSX.Element {\n  const {buttonProps, onClick, voteChosen, voteProgress} = props;\n\n  /**\n   * Functions\n   */\n\n  const getVotedClass = (choice: VoteChoices): string =>\n    voteChosen === choice ? 'votingbutton--voted' : '';\n\n  function getARIALabel(\n    choice: VoteChoices\n  ): Partial<React.HTMLAttributes<HTMLElement>> {\n    return voteProgress === choice\n      ? {'aria-label': `Voting ${choice} \\u2026`}\n      : {};\n  }\n\n  function getVotingText(choice: VoteChoices): React.ReactNode {\n    return voteProgress === choice ? (\n      <Loader aria-label={`Voting ${choice} spinner image`} role=\"img\" />\n    ) : voteChosen === choice ? (\n      `Voted ${choice}`\n    ) : (\n      `Vote ${choice}`\n    );\n  }\n\n  function handleClick(choice: VoteChoices) {\n    return () => {\n      onClick(choice);\n    };\n  }\n\n  /**\n   * Render\n   */\n\n  return (\n    <>\n      <button\n        {...buttonProps}\n        {...getARIALabel(VoteChoices.Yes)}\n        className={`proposaldetails__button ${getVotedClass(VoteChoices.Yes)}`}\n        onClick={handleClick(VoteChoices.Yes)}>\n        {getVotingText(VoteChoices.Yes)}\n      </button>\n      <button\n        {...buttonProps}\n        {...getARIALabel(VoteChoices.No)}\n        className={`proposaldetails__button ${getVotedClass(VoteChoices.No)}`}\n        onClick={handleClick(VoteChoices.No)}>\n        {getVotingText(VoteChoices.No)}\n      </button>\n    </>\n  );\n}\n","import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {\n  prepareVoteProposalData,\n  SnapshotType,\n} from '@openlaw/snapshot-js-erc712';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {useSignAndSubmitProposal} from './hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype SponsorArguments = [\n  string, // `dao`\n  string, // `proposalId`\n  string // `proposal data`\n];\n\ntype SponsorActionProps = {\n  proposal: ProposalData;\n};\n\nexport default function SponsorAction(props: SponsorActionProps) {\n  const {\n    proposal: {snapshotDraft, refetchProposalOrDraft},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled();\n\n  const {\n    proposalSignAndSendStatus,\n    signAndSendProposal,\n  } = useSignAndSubmitProposal<SnapshotType.proposal>();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING ||\n    proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    proposalSignAndSendStatus === Web3TxStatus.PENDING;\n\n  const isDone =\n    txStatus === Web3TxStatus.FULFILLED &&\n    proposalSignAndSendStatus === Web3TxStatus.FULFILLED;\n\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotDraft) {\n        throw new Error('No Snapshot draft was found.');\n      }\n\n      const contract = getContractByAddress(snapshotDraft.actionId, contracts);\n\n      const {\n        msg: {\n          payload: {name, body, metadata},\n          timestamp,\n        },\n      } = snapshotDraft;\n\n      // Sign and submit draft for snapshot-hub\n      const {data, signature} = await signAndSendProposal({\n        partialProposalData: {\n          name,\n          body,\n          metadata,\n          timestamp,\n        },\n        adapterAddress: contract.contractAddress,\n        type: SnapshotType.proposal,\n      });\n\n      /**\n       * Prepare `data` argument for submission to DAO\n       *\n       * For information about which data the smart contract needs for signature verification (e.g. `hashMessage`):\n       * @link https://github.com/openlawteam/molochv3-contracts/blob/master/contracts/adapters/voting/OffchainVoting.sol\n       */\n      const preparedVoteVerificationBytes = prepareVoteProposalData(\n        {\n          payload: {\n            name: data.payload.name,\n            body: data.payload.body,\n            choices: data.payload.choices,\n            snapshot: data.payload.snapshot.toString(),\n            start: data.payload.start,\n            end: data.payload.end,\n          },\n          sig: signature,\n          space: data.space,\n          timestamp: parseInt(data.timestamp),\n        },\n        web3Instance\n      );\n\n      const sponsorArguments: SponsorArguments = [\n        daoRegistryAddress,\n        snapshotDraft.idInDAO,\n        preparedVoteVerificationBytes,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'sponsorProposal',\n        contract.instance.methods,\n        sponsorArguments,\n        txArguments\n      );\n\n      // Update the proposal\n      refetchProposalOrDraft();\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Either Snapshot or chain tx\n    if (\n      txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n      proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM\n    ) {\n      return 'Awaiting your confirmation\\u2026';\n    }\n\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={isDisabled || isInProcessOrDone}\n          onClick={isDisabled || isInProcessOrDone ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Sponsor'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button className=\"button--help\" onClick={openWhyDisabledModal}>\n            Why is sponsoring disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is sponsoring disabled?\" />\n    </>\n  );\n}\n","import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {CycleEllipsis} from '../feedback';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessArguments = [\n  string, // `dao`\n  string // `proposalId`\n];\n\ntype ProcessActionProps = {\n  disabled?: boolean;\n  proposal: ProposalData;\n};\n\nexport default function ProcessAction(props: ProcessActionProps) {\n  const {\n    disabled: propsDisabled,\n    proposal: {snapshotProposal},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING;\n\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n  const areSomeDisabled = isDisabled || isInProcessOrDone || propsDisabled;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      const contract = getContractByAddress(\n        snapshotProposal.actionId,\n        contracts\n      );\n\n      const processArguments: ProcessArguments = [\n        daoRegistryAddress,\n        snapshotProposal.idInDAO,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'processProposal',\n        contract.instance.methods,\n        processArguments,\n        txArguments\n      );\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Awaiting your confirmation\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={areSomeDisabled}\n          onClick={areSomeDisabled ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Process'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button className=\"button--help\" onClick={openWhyDisabledModal}>\n            Why is processing disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is processing disabled?\" />\n    </>\n  );\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {CycleEllipsis} from '../feedback';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData, DistributionStatus} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {ContractAdapterNames, Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessActionProps = {\n  adapterName: ContractAdapterNames;\n  proposal: ProposalData;\n};\n\ntype SubmitConfigs = {\n  functionName: string;\n  functionArguments: any[];\n};\n\ntype ActionDisabledReasons = {\n  alreadyCompletedMessage: string;\n};\n\n/**\n * @note Attempt to keep this component general to handle any adapters that may\n * have post-process actions\n */\nexport default function PostProcessAction(props: ProcessActionProps) {\n  const {\n    adapterName,\n    proposal: {snapshotProposal},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Refs\n   */\n\n  const actionDisabledReasonsRef = useRef<ActionDisabledReasons>({\n    alreadyCompletedMessage: '',\n  });\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryContract = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n    setOtherDisabledReasons,\n  } = useMemberActionDisabled();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING;\n\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n  const areSomeDisabled = isDisabled || isInProcessOrDone;\n\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    async function getActionDisabledReasons() {\n      // 1. Determine and set reasons why action would be disabled\n\n      // Reason: distribution already completed\n      if (adapterName === ContractAdapterNames.distribute) {\n        if (!snapshotProposal) {\n          throw new Error('No Snapshot proposal was found.');\n        }\n        if (!daoRegistryContract) {\n          throw new Error('No DAO Registry contract was found.');\n        }\n\n        try {\n          const distributeContract = getContractByAddress(\n            snapshotProposal.actionId,\n            contracts\n          );\n          const distributeProposal = await distributeContract.instance.methods\n            .distributions(\n              daoRegistryContract.contractAddress,\n              snapshotProposal.idInDAO\n            )\n            .call();\n\n          actionDisabledReasonsRef.current = {\n            ...actionDisabledReasonsRef.current,\n            alreadyCompletedMessage:\n              DistributionStatus[distributeProposal.status] !==\n              DistributionStatus[DistributionStatus.IN_PROGRESS]\n                ? 'The transfer has already been completed.'\n                : '',\n          };\n        } catch (error) {\n          console.error(error);\n        }\n      }\n\n      // 2. Set reasons\n      setOtherDisabledReasons(Object.values(actionDisabledReasonsRef.current));\n    }\n\n    getActionDisabledReasons();\n  }, [\n    adapterName,\n    contracts,\n    daoRegistryContract,\n    setOtherDisabledReasons,\n    snapshotProposal,\n  ]);\n\n  /**\n   * Functions\n   */\n\n  async function getSubmitConfigsByAdapter(): Promise<SubmitConfigs> {\n    switch (adapterName) {\n      case ContractAdapterNames.distribute:\n        if (!daoRegistryContract) {\n          throw new Error('No DAO Registry contract was found.');\n        }\n\n        let toIndexArg = '0';\n        const isTypeAllMembers =\n          snapshotProposal?.msg.payload.metadata.isTypeAllMembers;\n        if (isTypeAllMembers) {\n          try {\n            const nbMembers = await daoRegistryContract.instance.methods\n              .getNbMembers()\n              .call();\n            toIndexArg = nbMembers.toString();\n          } catch (error) {\n            throw new Error('Error while retrieving number of DAO members');\n          }\n        }\n\n        return {\n          functionName: 'distribute',\n          functionArguments: [daoRegistryContract.contractAddress, toIndexArg],\n        };\n      default:\n        return {functionName: '', functionArguments: []};\n    }\n  }\n\n  async function handleSubmit() {\n    try {\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      const contract = getContractByAddress(\n        snapshotProposal.actionId,\n        contracts\n      );\n\n      const {\n        functionName,\n        functionArguments,\n      } = await getSubmitConfigsByAdapter();\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        functionName,\n        contract.instance.methods,\n        functionArguments,\n        txArguments\n      );\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatusByAdapter(): string {\n    switch (adapterName) {\n      case ContractAdapterNames.distribute:\n        return 'Assets transferred!';\n      default:\n        return 'Action submitted!';\n    }\n  }\n\n  function renderButtonTextByAdapter(): {start: string; done: string} {\n    switch (adapterName) {\n      case ContractAdapterNames.distribute:\n        return {start: 'Transfer assets', done: 'Transfer done'};\n      default:\n        return {start: 'Process action', done: 'Done'};\n    }\n  }\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Awaiting your confirmation\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>{renderSubmitStatusByAdapter()}</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={areSomeDisabled}\n          onClick={areSomeDisabled ? () => {} : handleSubmit}>\n          {isInProcess ? (\n            <Loader />\n          ) : isDone ? (\n            renderButtonTextByAdapter()['done']\n          ) : (\n            renderButtonTextByAdapter()['start']\n          )}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button className=\"button--help\" onClick={openWhyDisabledModal}>\n            Why is action disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is action disabled?\" />\n    </>\n  );\n}\n","import React from 'react';\n\nimport {\n  OffchainVotingStatus,\n  OffchainVotingAction,\n  OffchainOpRollupVotingSubmitResultAction,\n} from './voting';\nimport {VotingState} from './voting/types';\nimport {ContractAdapterNames} from '../web3/types';\nimport {ProposalData, ProposalFlowStatus} from './types';\nimport {useProposalWithOffchainVoteStatus} from './hooks';\nimport SponsorAction from './SponsorAction';\nimport ProcessAction from './ProcessAction';\nimport PostProcessAction from './PostProcessAction';\n\ntype ProposalWithOffchainActionsProps = {\n  adapterName: ContractAdapterNames;\n  proposal: ProposalData;\n};\n\nexport default function ProposalWithOffchainVoteActions(\n  props: ProposalWithOffchainActionsProps\n) {\n  const {adapterName, proposal} = props;\n\n  /**\n   * Our hooks\n   */\n\n  const {\n    daoProposalVotes,\n    status,\n    daoProposalVoteResult,\n  } = useProposalWithOffchainVoteStatus(proposal);\n\n  /**\n   * Variables\n   */\n\n  // Set the grace period start (per the DAO's timestamp) if the status says we're in grace period.\n  const gracePeriodStartMs: number =\n    daoProposalVotes && status === ProposalFlowStatus.OffchainVotingGracePeriod\n      ? Number(daoProposalVotes.gracePeriodStartingTime) * 1000\n      : 0;\n  //  Currently, only Distribute adapter has an action that occurs after the\n  //  proposal is processed.\n  const showPostProcessAction =\n    adapterName === ContractAdapterNames.distribute &&\n    status === ProposalFlowStatus.Completed &&\n    daoProposalVoteResult &&\n    VotingState[daoProposalVoteResult] === VotingState[VotingState.PASS];\n\n  /**\n   * Render\n   */\n  return (\n    <>\n      {/* OFF-CHAIN VOTING STATUS */}\n      {(status === ProposalFlowStatus.OffchainVoting ||\n        status === ProposalFlowStatus.OffchainVotingSubmitResult ||\n        status === ProposalFlowStatus.OffchainVotingGracePeriod ||\n        status === ProposalFlowStatus.Process ||\n        status === ProposalFlowStatus.Completed) && (\n        <OffchainVotingStatus\n          countdownGracePeriodStartMs={gracePeriodStartMs}\n          proposal={proposal}\n        />\n      )}\n\n      <div className=\"proposaldetails__button-container\">\n        {/* SPONSOR BUTTON */}\n        {status === ProposalFlowStatus.Sponsor && (\n          <SponsorAction proposal={proposal} />\n        )}\n\n        {/* OFF-CHAIN VOTING BUTTONS */}\n        {status === ProposalFlowStatus.OffchainVoting && (\n          <OffchainVotingAction adapterName={adapterName} proposal={proposal} />\n        )}\n\n        {/* OFF-CHAIN VOTING SUBMIT VOTE RESULT */}\n        {/* @todo A wrapping component to get the correct off-chain voting component */}\n        {status === ProposalFlowStatus.OffchainVotingSubmitResult && (\n          <OffchainOpRollupVotingSubmitResultAction\n            adapterName={adapterName}\n            proposal={proposal}\n          />\n        )}\n\n        {(status === ProposalFlowStatus.OffchainVotingGracePeriod ||\n          status === ProposalFlowStatus.Process) && (\n          <ProcessAction\n            // Show during DAO proposal grace period, but set to disabled\n            disabled={status === ProposalFlowStatus.OffchainVotingGracePeriod}\n            proposal={proposal}\n          />\n        )}\n\n        {showPostProcessAction && (\n          <PostProcessAction adapterName={adapterName} proposal={proposal} />\n        )}\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}